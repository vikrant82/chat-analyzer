---
description: Configuration file structure and tuning guidelines
---
# Configuration Guide

## Config File Structure

Main configuration in [config.json](mdc:config.json), example in [example-config.json](mdc:example-config.json).

## Performance Tuning Settings

### Parallel Fetch Settings (Webex & Telegram)

```json
{
  "webex": {
    "parallel_fetch_chunk_days": 7,
    "max_concurrent_fetches": 5
  },
  "telegram": {
    "parallel_fetch_chunk_days": 7,
    "max_concurrent_fetches": 5
  }
}
```

### Configuration Guidelines

| Setting | Recommended | Range | Notes |
|---------|------------|-------|-------|
| `parallel_fetch_chunk_days` | **7** | 3-14 | Days per chunk for parallel fetching |
| `max_concurrent_fetches` | **5** | 3-10 | Max simultaneous API requests |

### Tuning Based on Symptoms

| Symptom | Likely Cause | Solution |
|---------|--------------|----------|
| 503 errors | Too many concurrent requests | Reduce `max_concurrent_fetches` to 3 |
| Slow fetching | Chunks too large | Reduce `chunk_days` to 5 |
| Many small API calls | Chunks too small | Increase `chunk_days` to 10 |
| "Database is locked" (Telegram) | Code issue, not config | Use shared client pattern |

### ⚠️ WARNING: Don't Use These Values

- `parallel_fetch_chunk_days: 1` - Creates too many chunks (e.g., 100 chunks for 100 days)
- `max_concurrent_fetches: 20+` - Will overwhelm API servers
- `max_concurrent_fetches: 1` - Defeats purpose of parallelization

## Image Processing Settings

```json
{
  "webex": {
    "image_processing": {
      "enabled": true,
      "max_size_bytes": 10485760,
      "allowed_mime_types": [
        "image/jpeg",
        "image/png",
        "image/gif",
        "image/webp"
      ]
    }
  }
}
```

These are backend defaults. Users can override via UI checkboxes.

## Bot Configuration

**Important**: Bots are managed in [bots.json](mdc:bots.json), NOT in config.json.
Use the UI or [bot_cli.py](mdc:bot_cli.py) to manage bots.
